body {
    background-color: bisque;
    width: 600px;
    margin: 0 auto;
}
.wrapper {
    padding: 15px 20px;
    border: 1px dashed #ff6c60;
}
.left {
    width: 120px;
    border: 5px solid #ddd;
}
.right {
    margin-left: 20px;
    border: 5px solid #ddd;
}

/* double inline-block 
缺点是需要知道左侧盒子的宽度，
两个盒子的距离以及要设置各个元素的box-sizing利于计算宽度，
需要消除空格字符的影响。需要满足顶端对齐*/
/* .wrapper {
    box-sizing: center-box;
    font-size: 0; /*消除空格的影响 
} 
.wrapper .left,
.wrapper .right {
    display: inline-block;
    vertical-align: top;
    font-size: 14px;
    box-sizing: border-box;
} 
.wrapper .right {
    width: calc(100% - 140px); /*计算父容器宽度的100%需要减去的数值
}  */


/* double float 
缺点是需要知道左侧盒子的宽度，
两个盒子之间的间距以及设置每个元素的box-sizing，以及清除父元素的浮动*/
/* .wrapper {
    overflow: auto;
    box-sizing: center-box;
}
.wrapper .left,
.wrapper .right {
    float: left;
    box-sizing: border-box;
} 
.wrapper .right {
    width: calc(100% - 140px);
} */


/* float-margin-left scheme 
缺点是需要知道左侧盒子的宽度来计算右侧盒子的margin-left，
清除父元素的浮动
.wrapper {
    overflow: hidden;
}
.wrapper .left {
    float: left;
}
.wrapper .right{
    margin-left: 150px;
}*/


/* absolute+margin-left 
没有清除浮动的方法，若右侧盒子高于左侧盒子，
就会超出父元素的高度，为此只能设置父元素的min-height
.wrapper .left {
    position: absolute;
}
.wrapper .right {
    margin-left: 150px;
}*/


/* float+BFC 
.wrapper {
    overflow: hidden;
}
.wrapper .left {
    float: left;
    margin-right: 20px;
}
.wrapper .right {
    margin-left: 0;
    overflow: auto; /*形成了bfc
}*/

/*未实现等高*/
/*flex scheme
要求浏览器版本足够高，
其次两个盒子align-items具有默认值stretch,因此会等高
.wrapper {
    display: flex;
    align-items: flex-start;
}
.wrapper .left {
    flex: 0 0 auto;
}
.wrapper .right {
    flex: 1 1 auto;
}*/


/*grid scheme*/
.wrapper{
    display: grid;
    grid-template-columns: 120px 1fr;
    align-items: start;
}

.wrapper .left,
.wrapper .right {
    box-sizing: border-box;
}

.wrapper .left {
    grid-column: 1;
}

.wrapper.right {
    grid-column: 2;
}